opcache.enable = 1
opcache.max_accelerated_files = 20000
opcache.memory_consumption=512
opcache.file_update_protection=0
opcache.validate_timestamps = 0
; essa opção save_comments é crucial para quem usa o módulo `dafiti/shared`
; por causa das anotations dos métodos nos comentários
opcache.save_comments = 1
; configurar os logs exclusivos do opcache para stdout
opcache.error_log=/dev/stdout


; Conexões persistentes com base de dados
; no geral é uma má prática em servidor de produção
; usar conexão persistente, então para desabilitar basta
; setar allow_persistent = 0 nos drivers instalados que
; podem ser pgsql, oracle, mysql, etc...
odbc.allow_persistent = 0
mysqli.allow_persistent = 0
mysql.allow_persistent = 0
pgsql.allow_persistent = 0

; PHP LIMITS
; limit de memória depende de cara aplicação, não existe numero mágico.
; esse limit irá ajudar a fazer o cálculo de pm.max_children do php-fpm
; mas caso o processo da sua aplicação ficar sem memória, um log do tipo:
; exauted memory, trying to alocate x of y memory ....
; então quando isso acontecer, primeiro validar se não é um looping infinito
; ou se é uma dependencia, e depois ajustar para a quantidade adequada para
; a aplicação. O valor original do php puro é de 128M
memory_limit = -1
; é o tempo máximo que um processo php fica em execução
max_execution_time = 180
; max_input_vars é o tamanho máximo da matriz de variáveis
; valor padrão é 1000 então se uma request com mais de 1000
; propriedades no JSON, o php irá truncar os valores
max_input_vars = 999999
; tamanho máximo do log para erros
log_errors_max_len = 20480
; tamanho máximo do body das requests, estar alinhado com a configuração
; do nginx client_max_body_size
post_max_size = 108M
; tamanho máximo de arquivos para upload
upload_max_filesize = 16M
max_input_vars=9999999

;log errors
log_errors = On
error_reporting = E_ALL | E_STRICT
error_log = /dev/stderr

extension=mongodb.so
